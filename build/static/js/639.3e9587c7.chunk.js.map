{"version":3,"file":"static/js/639.3e9587c7.chunk.js","mappings":"kOAMe,SAASA,IACtB,MAAM,YAAEC,EAAW,gBAAEC,EAAe,mBAAEC,IAAuBC,EAAAA,EAAAA,MACtDC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GACjCG,GAAWC,EAAAA,EAAAA,UACXC,GAAcD,EAAAA,EAAAA,UACdE,GAAqBF,EAAAA,EAAAA,UACrBG,GAAWC,EAAAA,EAAAA,OACX,EAAEC,EAAC,KAAEC,IAASC,EAAAA,EAAAA,MAgCpB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAF,UACHF,EAAAA,EAAAA,MAACI,EAAAA,EAAKC,KAAI,CAAAH,SAAA,EACRC,EAAAA,EAAAA,KAAA,MAAIG,UAAU,mBAAkBJ,SAAEL,EAAE,oBACnCX,IACCiB,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CAACD,UAAU,cAAcE,QAAQ,SAAQN,SAC5C,KAAOhB,KAGZc,EAAAA,EAAAA,MAACS,EAAAA,EAAI,CAACC,SAxCOC,UAInB,GAFAC,EAAEC,iBAEEpB,EAAYqB,QAAQC,QAAUrB,EAAmBoB,QAAQC,MAC3D,OAAO5B,EAAS,2BAGlB,MAAM6B,EAAW,GACjB1B,GAAW,GACXH,EAAS,IACLI,EAASuB,QAAQC,OAASjC,EAAYmC,OACxCD,EAASE,KAAKnC,EAAgBQ,EAASuB,QAAQC,QAE7CtB,EAAYqB,QAAQC,OACtBC,EAASE,KAAKlC,EAAmBS,EAAYqB,QAAQC,QAEvDI,QAAQC,IAAIJ,GACTK,MAAK,KACJ1B,EAAS,IAAI,IAEd2B,OAAOpC,IACNqC,QAAQC,IAAItC,GACZC,EAAS,2BAA6BD,EAAM,IAE7CuC,SAAQ,KACPnC,GAAW,EAAM,GACjB,EAa+BY,SAAA,EAC3BF,EAAAA,EAAAA,MAACS,EAAAA,EAAKiB,MAAK,CAAAxB,SAAA,EACTC,EAAAA,EAAAA,KAACM,EAAAA,EAAKkB,MAAK,CAACC,QAAQ,QAAO1B,SAAEL,EAAE,YAC/BM,EAAAA,EAAAA,KAACM,EAAAA,EAAKoB,QAAO,CACXC,KAAK,QACLC,GAAG,QACHC,IAAKzC,EACL0C,aAAyB,OAAXnD,QAAW,IAAXA,OAAW,EAAXA,EAAamC,MAC3BiB,UAAQ,QAGZlC,EAAAA,EAAAA,MAACS,EAAAA,EAAKiB,MAAK,CAAAxB,SAAA,EACTC,EAAAA,EAAAA,KAACM,EAAAA,EAAKkB,MAAK,CAACC,QAAQ,WAAU1B,SAAEL,EAAE,eAClCM,EAAAA,EAAAA,KAACM,EAAAA,EAAKoB,QAAO,CAACC,KAAK,WAAWC,GAAG,WAAWC,IAAKvC,QAEnDO,EAAAA,EAAAA,MAACS,EAAAA,EAAKiB,MAAK,CAAAxB,SAAA,EACTC,EAAAA,EAAAA,KAACM,EAAAA,EAAKkB,MAAK,CAACC,QAAQ,mBAAkB1B,SACnCL,EAAE,uBAELM,EAAAA,EAAAA,KAACM,EAAAA,EAAKoB,QAAO,CACXC,KAAK,WACLC,GAAG,mBACHC,IAAKtC,QAGTS,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACL7B,UAAU,aACVE,QAAQ,UACRsB,KAAK,SACLM,SAAU/C,EAAQa,SAEjBL,EAAE,qBAKXM,EAAAA,EAAAA,KAAA,OAAKG,UAAU,yBAAwBJ,UACrCC,EAAAA,EAAAA,KAACkC,EAAAA,GAAI,CAACC,GAAI,IAAIpC,SAAEL,EAAE,gBAI1B,C","sources":["components/UpdateProfile.js"],"sourcesContent":["import { useRef, useState } from \"react\";\r\nimport { Card, Form, Button, Alert } from \"react-bootstrap\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default function UpdateProfile() {\r\n  const { currentUser, updateUserEmail, updateUserPassword } = useAuth();\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const passwordConfirmRef = useRef();\r\n  const navigate = useNavigate();\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const handleSubmit = async (e) => {\r\n    // you should make it first task to work\r\n    e.preventDefault();\r\n\r\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n      return setError(\"Passwords do not match \");\r\n    }\r\n\r\n    const promises = [];\r\n    setLoading(true);\r\n    setError(\"\");\r\n    if (emailRef.current.value != currentUser.email) {\r\n      promises.push(updateUserEmail(emailRef.current.value));\r\n    }\r\n    if (passwordRef.current.value) {\r\n      promises.push(updateUserPassword(passwordRef.current.value));\r\n    }\r\n    Promise.all(promises)\r\n      .then(() => {\r\n        navigate(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setError(\"Failed to update account\" + error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <Card.Body>\r\n          <h2 className=\"text-center mb-4\">{t(\"update profile\")}</h2>\r\n          {error && (\r\n            <Alert className=\"text-center\" variant=\"danger\">\r\n              {\"* \" + error}\r\n            </Alert>\r\n          )}\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"email\">{t(\"email\")}</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                id=\"email\"\r\n                ref={emailRef}\r\n                defaultValue={currentUser?.email}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"password\">{t(\"password\")}</Form.Label>\r\n              <Form.Control type=\"password\" id=\"password\" ref={passwordRef} />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"password-confirm\">\r\n                {t(\"password confirm\")}\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                id=\"password-confirm\"\r\n                ref={passwordConfirmRef}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              className=\"w-100 mt-3\"\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              disabled={loading}\r\n            >\r\n              {t(\"update\")}\r\n            </Button>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        <Link to={\"/\"}>{t(\"cancel\")}</Link>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"names":["UpdateProfile","currentUser","updateUserEmail","updateUserPassword","useAuth","error","setError","useState","loading","setLoading","emailRef","useRef","passwordRef","passwordConfirmRef","navigate","useNavigate","t","i18n","useTranslation","_jsxs","_Fragment","children","_jsx","Card","Body","className","Alert","variant","Form","onSubmit","async","e","preventDefault","current","value","promises","email","push","Promise","all","then","catch","console","log","finally","Group","Label","htmlFor","Control","type","id","ref","defaultValue","required","Button","disabled","Link","to"],"sourceRoot":""}